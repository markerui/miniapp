<style lang="less">
@import '../../less/color.less';
@import '../../less/cardlist.less';
@import '../../less/cart.less';
.cart-confirm-margin_bottom10 {
  margin-bottom: 10px;
}

.cart-confirm-cll_title {
  .van-cell__value {
    color: #f44;
    font-weight: bold;
  }
}

.cart-confirm-address {
  .van-cell {
    background-color: @rootColor;
    color: #fff;
    .van-cell-info {
      line-height: 1.6;
      text {
        display: block;
        font-size: 12px;
      }
    }
  }
  .van-cell__right-icon-wrap {
    color: #fff;
  }
  .van-cell--clickable.van-cell--hover {
    background-color: rgba(@rootColor, 0.8);
  }
  &.cart-confirm-address_no {
    background-color: @rootColor;
    .van-cell {
      padding: 15px;
    }
    .van-cell__title {
      text-align: center;
    }
  }
}

.cart-confirm-list {
  .cart-confirm-list_head {
    .van-cell__title {
      font-weight: bold;
    }
  }
}

.cart-confirm-delivery {
  background-color: #fff;
  .cart-confirm-delivery_radio {
    padding: 15px;
    display: flex;
    flex-direction: row;
    align-items: center;
    // justify-content: space-between;
    font-size: 14px;
    .van-checkbox{
      margin-right: 15px;
    }
  }
  .cart-confirm-delivery_checkbox {
    padding: 0 15px 15px;
    display: flex;
    flex-direction: row;
    align-items: center;
    justify-content: flex-end;
  }
}

.cart-confirm-order {
  background-color: #fff;
  padding: 10px 0;
  .van-cell {
    color: #999;
    font-size: 12px;
    padding: 0 15px;
  }
}

.save-confirm {
  padding: 30px;
  .save-confirm_btn {
    background-color: @rootColor;
  }
}
</style>

<template>
  <block wx:if="{{confirmData.addressID}}">
    <view class="cart-confirm-margin_bottom10 cart-confirm-address">
      <van-cell is-link border="{{ false }}" center url="../address/index?cart=1">
        <view slot="title">
          <view class="van-cell-info">
            <view class="van-cell-name">{{addressInfo.name}} {{addressInfo.mobile}}</view>
            <text>{{addressInfo.provinceName}}-{{addressInfo.cityName}}-{{addressInfo.countyName}}</text>
            <text>{{addressInfo.address}}</text>
          </view>
        </view>
      </van-cell>
    </view>
  </block>
  <block wx:else>
    <view class="cart-confirm-margin_bottom10 cart-confirm-address cart-confirm-address_no">
      <van-cell title="新增收货地址" border="{{ false }}" is-link center url="../address/index?cart=1"/>
    </view>
  </block>
  <view class="cart-confirm-margin_bottom10 cart-confirm-cll_title cart-confirm-list">
    <view class="cart-confirm-list_head">
      <van-cell title="商品" value="¥{{confirmData.productAmount}}"/>
    </view>
    <van-cell-group>
      <repeat for="{{cardProList}}" key="index" index="index" item="cardProItem">
        <van-cell>
          <view slot="title">
            <view class="mk-cart-card_list">
                <view class="mk-cart-card_check">
                  <van-checkbox
                    checked-color="#e26431"
                    data-index="{{index}}"
                    value="{{ cardProItem.checked }}"
                    bind:change="onChangeCartChecke"
                  ></van-checkbox>
                </view>
              <van-card
                centered
                custom-class="mk-card_item"
                thumb-class="mk-card_img"
                title-class="mk-card_title"
                price="{{cardProItem.realPrice}}"
                title="{{cardProItem.productName}}"
                thumb="{{cardProItem.defaultImage}}"
                thumb-mode="aspectFill"
              >
                <view slot="desc" class="mk-card_desc">
                  <text>单位:{{cardProItem.unit}}</text>
                  <text>规格:{{cardProItem.size}}</text>
                </view>
                <view slot="footer" class="mk-card_item_stepper">
                  <text>剩余{{cardProItem.stock}}份</text>
                  <van-stepper
                    id="{{cardProItem.productID}}"
                    data-index="{{index}}"
                    disable-input
                    integer
                    min="1"
                    max="{{confirmData.optionalCount}}"
                    value="{{ cardProItem.productCount }}"
                    step="1"
                    bind:plus="onChangeAddStepper"
                    bind:minus="onChangeMinusStepper"
                  />
                </view>
              </van-card>
            </view>
          </view>
        </van-cell>
      </repeat>
    </van-cell-group>
  </view>
  <view class="cart-confirm-margin_bottom10 cart-confirm-cll_title cart-confirm-delivery">
    <van-cell>
      <view slot="title">配送方式</view>
    </van-cell>
    <van-checkbox-group class="cart-confirm-delivery_radio" value="{{checkType1Result}}" bind:change="onChangeCheckType1Result">
      <repeat for="{{checkType1}}" key="index" index="index" item="item">
        <van-checkbox name="{{item}}" checked-color="#e26431">{{item}}</van-checkbox>
       </repeat>
    </van-checkbox-group>
  </view>
  <view class="cart-confirm-margin_bottom10">
    <van-field type="textarea" value="{{confirmData.message}}" data-name="message" bind:change="onInput" placeholder="添加留言或备注信息" autosize border="{{ false }}"/>
  </view>
  <view class="cart-confirm-margin_bottom10">
    <view class="cart-confirm-cll_title">
      <van-cell-group>
        <van-cell title="订单金额" value="¥{{confirmData.productAmount}}" border="{{ false }}"/>
      </van-cell-group>
    </view>
  </view>
  <view class="save-confirm">
    <van-button
      type="warning"
      custom-class="save-confirm_btn"
      size="large"
      block
      round
      bind:tap="confirmOrder"
    >确认订单</van-button>
  </view>
  <van-dialog id="van-dialog"/>
  <van-toast id="van-toast"/>
</template>

<script>
import wepy from 'wepy';
import Api from '../../utils/api';
import Dialog from '../../components/vant/dialog/dialog';
import Toast from '../../components/vant/toast/toast';
import noData from '../../components/nodata';

export default class info extends wepy.page {
  config = {
    navigationBarTitleText: '确认订单',
    navigationBarBackgroundColor: '#fff',
    navigationBarTextStyle: 'black',
    backgroundColor: '#fff',
    usingComponents: {
      'van-icon': '../../components/vant/icon/index',
      'van-button': '../../components/vant/button/index',
      'van-cell': '../../components/vant/cell/index',
      'van-cell-group': '../../components/vant/cell-group/index',
      'van-card': '../../components/vant/card/index',
      'van-stepper': '../../components/vant/stepper/index',
      'van-field': '../../components/vant/field/index',
      'van-radio': '../../components/vant/radio/index',
      'van-radio-group': '../../components/vant/radio-group/index',
      'van-checkbox': '../../components/vant/checkbox/index',
      'van-checkbox-group': '../../components/vant/checkbox-group/index',
      'van-dialog': '../../components/vant/dialog/index',
      'van-toast': '../../components/vant/toast/index'
    }
  };

  components = {
    nodata: noData
  };

  mixins = [];

  data = {
    checkPayIndex: 1,
    checkType1:['自提','快递'],
    checkType1Result: [],
    addressInfo: [],
    cardProList: [],
    confirmData: [],
    checkCount: 0,
  };

  computed = {};

  watch = {};

  methods = {
    onInput(e){
      var value = e.detail;
      var name = e.currentTarget.dataset.name;
      this.confirmData[name] = value;
    },
    onChangeCartChecke(e) {
      var that = this;
      var index = e.currentTarget.dataset.index;
      var maxCount = that.confirmData.optionalCount;
      var cartIdsLenght = that.confirmData.cartList.length;
      if(cartIdsLenght >= maxCount || that.checkCount >= maxCount){
        if(e.detail){
          Dialog.alert({
            title: '选择失败',
            message: '最多只可以选择'+ maxCount + '件商品'
          });
        }
        that.cardProList[index].checked = false;
      }else{
        if(cartIdsLenght == 1 && e.detail){
          that.cardProList[index].productCount = 1;
        }
        that.cardProList[index].checked = e.detail;
      }
      that.setCartIds();
    },
    onChangeAddStepper(e) {
      var that = this;
      var index = e.currentTarget.dataset.index;
      var maxCount = that.confirmData.optionalCount;
      var cartIdsLenght = that.confirmData.cartList.length;
      if(cartIdsLenght >= maxCount || that.checkCount >= maxCount){
          Dialog.alert({
            title: '选择失败',
            message: '最多只可以选择'+ maxCount + '件商品'
          });
          that.cardProList[index].productCount -= 1;
          that.cardProList[index].stock += 1;
      }else{
        that.cardProList[index].productCount += 1;
        that.cardProList[index].stock -= 1;
      }
      that.setCartIds();
    },
    onChangeMinusStepper(e) {
      var that = this;
      var index = e.currentTarget.dataset.index;
      that.cardProList[index].productCount -= 1;
      that.cardProList[index].stock += 1;
      that.setCartIds();
    },
    onChangeCheckType1Result(e){
      var that = this;
      var detail = e.detail;
      var detailLast = detail[detail.length-1];
      that.checkType1Result.length = 0;
      that.checkType1Result.push(detailLast);
      switch (detailLast) {
        case '自提':
          that.confirmData.shippingModel = 1;
          break;
        case '快递':
          that.confirmData.shippingModel = 2;
          break;
        default:
          break;
      }
      that.$apply();
    },
    confirmOrder() {
      var that = this;
      var cartIdsLenght = that.confirmData.cartList.length;
      var maxCount = that.confirmData.optionalCount;
      if(cartIdsLenght == maxCount || that.checkCount == maxCount){
        that.PostOrderCreateCampaignOrder();
      }else{
        Dialog.alert({
          title: '确认失败',
          message: '请先选择'+ this.confirmData.optionalCount + '件商品'
        });
      }
    }
  };

  events = {};
  
  setCartIds(){
    var that = this;
    that.confirmData.cartList = [];
    that.checkCount = 0;
    that.cardProList.forEach(function(e,i) {
      if (e.checked) {
        var pushData = {
          ProductID: e.productID,
          ProductCount: e.productCount
        }
        that.checkCount += e.productCount;
        that.confirmData.cartList.push(pushData);
      }
    });
  }

  PostOrderCreateCampaignOrder(){
    var that = this;
    Api.PostOrderCreateCampaignOrder(that.confirmData,function(res){
      if(res.errCode >= 1000){
        Api.wxLogin(function(res) {
          if (res.resultData.tokenId) {
            that.PostOrderCreateCampaignOrder();
          } else {
            Toast.fail(res.message);
          }
        });
      }else{
        if(res.result){
          wx.removeStorage({
            key: 'findCartConfirm'
          });
          var orderNum = res.resultData.orderNum;
          if(that.confirmData.productAmount>0){
            that.PostOrderWeixinPay(orderNum);
          }else{
            Dialog.alert({
              title: '订单已生成',
              message: '订单已经生成了,请耐心等待发货'
            }).then(() => {
              wx.redirectTo({
                url: '../order/list'
              });
            });
          }
        }else{
          Dialog.alert({
            title: '确认失败',
            message: res.message
          });
        }
      }
    });
  }

  PostOrderWeixinPay(orderNum){
    var that = this;
    var data = {
      orderNum: orderNum
    };
    Api.PostOrderWeixinPay(data,function(res){
      if(res.errCode >= 1000){
        Api.wxLogin(function(res) {
          if (res.resultData.tokenId) {
            that.PostOrderWeixinPay(data);
          } else {
            Toast.fail(res.message);
          }
        });
      }else{
        if(res.result){
          var prepaidOrder = res.resultData.prepaidOrder;
          wx.requestPayment({
            timeStamp: prepaidOrder.timestamp,
            nonceStr: prepaidOrder.nonce,
            package: prepaidOrder.package,
            signType: 'MD5',
            paySign: prepaidOrder.sign,
            success(res) {
              Dialog.alert({
                title: '支付成功',
                message: '请耐心等待发货'
              }).then(() => {
                wx.redirectTo({
                  url: '../order/list'
                });
              });
            },
            fail(res){
              Dialog.alert({
                title: '支付失败',
                message: '请在我的订单重新发起支付'
              }).then(() => {
                wx.redirectTo({
                  url: '../order/list'
                });
              });
            }
          });
        }else{
          Dialog.alert({
            title: '支付失败',
            message: res.message
          }).then(() => {
            wx.redirectTo({
              url: '../order/list'
            });
          });
        }
      }
    });
  }

  PostMemberGetAddress(){
    var that = this;
    var reqData = {
      id : that.confirmData.addressID
    };
    Api.PostMemberGetAddress(reqData,function(res){
      if(res.errCode >= 1000){
        Api.wxLogin(function(res) {
          if (res.resultData.tokenId) {
            that.PostMemberGetAddress();
          } else {
            Toast.fail(res.message);
          }
        });
      }else{
        if(res.result){
          that.addressInfo = res.resultData.adressInfo;
          that.$apply();
        }else{
          Toast.fail(res.message);
        }
      }
    });
  }

  onLoad(e) {
    var that = this;
    wx.removeStorage({
      key: 'addressId'
    });
    wx.getStorage({
      key: 'findCartConfirm',
      success(res) {
        var ProDataList = res.data.productList;
        ProDataList.forEach(function(e) {
          e.checked = false;
        });
        that.cardProList = ProDataList;
        that.confirmData = res.data.orderData;
        if(that.confirmData.addressID){
          that.PostMemberGetAddress();
        }
        switch(res.data.orderData.shippingModel){
          case 1:
            that.checkType1Result.push('自提');
            break;
          case 2:
            that.checkType1Result.push('快递');
            break;
          default:
            break;
        }
      }
    });
  };

  onShow(e){
    var that = this;
    wx.getStorage({
      key: 'addressId',
      success(res) {
        that.confirmData.addressID = res.data;
        that.PostMemberGetAddress();
      }
    });
  }
}
</script>
